//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MasterFloorApp.Data.Model
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Windows;

    public partial class MasterFloorModel : DbContext
    {
        private static MasterFloorModel _context;

        public MasterFloorModel()
            : base("name=MasterFloorModel")
        {
        }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }

        private static bool CheckConnecting()
        {
            try
            {
                MasterFloorModel showroom = new MasterFloorModel();
                showroom.Database.Connection.Open();
                return true;
            }
            catch
            {
                MessageBox.Show("Отсутствует подключение к серверу. Проверьте подключение и повторите попытку позже!", "Ошибка подключения", MessageBoxButton.OK, MessageBoxImage.Information);
                return false;
            }
        }

        public static MasterFloorModel GetContext()
        {
            if (!CheckConnecting())
                Environment.Exit(0);

            if (_context == null)
                _context = new MasterFloorModel();

            return _context;
        }

        public static MasterFloorModel Context { get { return _context; } }

        public virtual DbSet<MaterialType> MaterialType { get; set; }
        public virtual DbSet<Partner> Partner { get; set; }
        public virtual DbSet<PartnerProduct> PartnerProduct { get; set; }
        public virtual DbSet<PartnerType> PartnerType { get; set; }
        public virtual DbSet<Product> Product { get; set; }
        public virtual DbSet<ProductType> ProductType { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
    }
}
